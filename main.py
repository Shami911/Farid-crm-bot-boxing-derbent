import logging
import asyncio
from datetime import datetime, timedelta

from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.dispatcher.filters import Command
from aiogram.dispatcher.filters.state import State, StatesGroup

import gspread
from oauth2client.service_account import ServiceAccountCredentials

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
logging.basicConfig(level=logging.INFO)

# --- –¢–æ–∫–µ–Ω –±–æ—Ç–∞ ---
BOT_TOKEN = '7750147455:AAH5kY4fUeJ8Rqwrcyl3reTBG0jjK1SBRNg'

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ ---
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é ---
main_menu_kb = ReplyKeyboardMarkup(resize_keyboard=True)
main_menu_kb.add(
    KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å"),
    KeyboardButton("üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫"),
    KeyboardButton("‚è∞ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ä–æ–∫–∏"),
    KeyboardButton("üí∞ –ü—Ä–∏–±—ã–ª—å")
)

# --- –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets ---
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_name('credentials.json', scope)
client = gspread.authorize(creds)
SPREADSHEET_NAME = '–®–∫–æ–ª–∞ –±–æ–∫—Å–∞ –§–∞—Ä–∏–¥'
sheet = client.open(SPREADSHEET_NAME).sheet1

# --- –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–µ –æ–±–µ—Ä—Ç–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–∞–±–ª–∏—Ü–µ–π ---
async def get_all_records_async():
    return await asyncio.to_thread(sheet.get_all_records)

async def append_row_async(row):
    await asyncio.to_thread(sheet.append_row, row)

# --- –ö–æ–º–∞–Ω–¥–∞ /start ---
@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø CRM-–±–æ—Ç –¥–ª—è —à–∫–æ–ª—ã –±–æ–∫—Å–∞ –õ–æ–∫–∞–ª—å–Ω–æ111.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã:\n"
        "/add_student - –¥–æ–±–∞–≤–∏—Ç—å —É—á–µ–Ω–∏–∫–∞\n"
        "/list_students - —Å–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤\n"
        "/check - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫—Ç–æ —Å–∫–æ—Ä–æ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è",
        reply_markup=main_menu_kb
    )

# --- –°–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤ ---
@dp.message_handler(commands=['list_students'])
@dp.message_handler(text="üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫")
async def list_students(message: types.Message):
    records = await get_all_records_async()
    response = "–£—á–µ–Ω–∏–∫–∏ –∏ –¥–Ω–∏ –æ—Å—Ç–∞–ª–æ—Å—å:\n"
    for rec in records:
        response += f"{rec['–§–ò–û']} - {rec['–î–Ω–µ–π –æ—Å—Ç–∞–ª–æ—Å—å']} –¥–Ω–µ–π\n"
    await message.answer(response)

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤, –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—â–∏—Ö—Å—è —Å–∫–æ—Ä–æ ---
@dp.message_handler(commands=['check'])
@dp.message_handler(text="‚è∞ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ä–æ–∫–∏")
async def check_expiring(message: types.Message):
    records = await get_all_records_async()
    today = datetime.now().date()
    notify_list = []
    for rec in records:
        try:
            end_date = datetime.strptime(rec['–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è'], "%d.%m.%Y").date()
            days_left = (end_date - today).days
        except Exception as e:
            logging.warning(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã —É {rec.get('–§–ò–û', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}: {e}")
            continue

        if 0 <= days_left <= 3:
            notify_list.append(f"{rec['–§–ò–û']} - –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ {days_left} –¥–Ω–µ–π")
            if rec.get('Telegram ID'):
                try:
                    await bot.send_message(rec['Telegram ID'], f"–í–∞—à –∞–±–æ–Ω–µ–º–µ–Ω—Ç –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ {days_left} –¥–Ω–µ–π.")
                except Exception as e:
                    logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {rec['–§–ò–û']}: {e}")
    if notify_list:
        await message.answer("–°–∫–æ—Ä–æ –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—Ç—Å—è –∞–±–æ–Ω–µ–º–µ–Ω—Ç—ã:\n" + "\n".join(notify_list))
    else:
        await message.answer("–ù–µ—Ç –∞–±–æ–Ω–µ–º–µ–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—Ç—Å—è –≤ –±–ª–∏–∂–∞–π—à–∏–µ 3 –¥–Ω—è.")

# --- –ü—Ä–∏–±—ã–ª—å ---
@dp.message_handler(text="üí∞ –ü—Ä–∏–±—ã–ª—å")
async def show_profit(message: types.Message):
    records = await get_all_records_async()
    today = datetime.today().date()
    week_ago = today - timedelta(days=7)
    month_ago = today - timedelta(days=30)

    day_total = 0
    week_total = 0
    month_total = 0

    for rec in records:
        try:
            start_date = datetime.strptime(rec['–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞'], "%d.%m.%Y").date()
            payment = int(rec['–°—É–º–º–∞ –æ–ø–ª–∞—Ç—ã (–≤ —Ä—É–±–ª—è—Ö)'])
            if start_date == today:
                day_total += payment
            if week_ago <= start_date <= today:
                week_total += payment
            if month_ago <= start_date <= today:
                month_total += payment
        except Exception as e:
            logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø–∏—Å–∏: {e}")
            continue

    await message.answer(
        f"üí∞ *–ü—Ä–∏–±—ã–ª—å:*\n"
        f"–°–µ–≥–æ–¥–Ω—è: {day_total} ‚ÇΩ\n"
        f"–ó–∞ –Ω–µ–¥–µ–ª—é: {week_total} ‚ÇΩ\n"
        f"–ó–∞ –º–µ—Å—è—Ü: {month_total} ‚ÇΩ",
        parse_mode="Markdown"
    )

# --- FSM –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—á–µ–Ω–∏–∫–∞ ---
class AddStudentState(StatesGroup):
    fio = State()
    phone = State()
    telegram_id = State()
    abon_type = State()
    start_date = State()
    end_date = State()
    payment = State()

@dp.message_handler(Command("cancel"), state="*")
async def cancel_handler(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    logging.info(f"–¢–µ–∫—É—â–∞—è —Å—Ç–∞–¥–∏—è FSM: {current_state}")

    if current_state is None:
        await message.reply("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
        return

    await state.finish()
    await message.reply("‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_menu_kb)

@dp.message_handler(commands=['add_student'])
@dp.message_handler(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å")
async def cmd_add_student(message: types.Message):
    logging.info(f"–ö–æ–º–∞–Ω–¥–∞ /add_student –≤—ã–∑–≤–∞–Ω–∞ –æ—Ç {message.from_user.id}")
    await AddStudentState.fio.set()
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –§–ò–û —É—á–µ–Ω–∏–∫–∞:\n\n‚ÑπÔ∏è –í –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –≤—ã –º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ /cancel, —á—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å.")

@dp.message_handler(state=AddStudentState.fio)
async def process_fio(message: types.Message, state: FSMContext):
    await state.update_data(fio=message.text)
    await AddStudentState.phone.set()
    await message.reply("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω:")

@dp.message_handler(state=AddStudentState.phone)
async def process_phone(message: types.Message, state: FSMContext):
    await state.update_data(phone=message.text)
    await AddStudentState.telegram_id.set()
    await message.reply("–í–≤–µ–¥–∏—Ç–µ Telegram ID:")

@dp.message_handler(state=AddStudentState.telegram_id)
async def process_tid(message: types.Message, state: FSMContext):
    await state.update_data(telegram_id=message.text)
    await AddStudentState.abon_type.set()
    await message.reply("–í–≤–µ–¥–∏—Ç–µ —Ç–∏–ø –∞–±–æ–Ω–µ–º–µ–Ω—Ç–∞ (–ì—Ä—É–ø–ø–æ–≤–æ–π, –ú–∞–ª–∞—è –≥—Ä—É–ø–ø–∞, –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ):")

@dp.message_handler(state=AddStudentState.abon_type)
async def process_abon(message: types.Message, state: FSMContext):
    await state.update_data(abon_type=message.text)
    await AddStudentState.start_date.set()
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ (–î–î.–ú–ú.–ì–ì–ì–ì):")

@dp.message_handler(state=AddStudentState.start_date)
async def process_start(message: types.Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã
    try:
        datetime.strptime(message.text, "%d.%m.%Y")
    except ValueError:
        await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:")
        return
    await state.update_data(start_date=message.text)
    await AddStudentState.end_date.set()
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è (–î–î.–ú–ú.–ì–ì–ì–ì):")

@dp.message_handler(state=AddStudentState.end_date)
async def process_end(message: types.Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã
    try:
        datetime.strptime(message.text, "%d.%m.%Y")
    except ValueError:
        await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:")
        return
    await state.update_data(end_date=message.text)
    await AddStudentState.payment.set()
    await message.reply("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –æ–ø–ª–∞—Ç—ã (–≤ —Ä—É–±–ª—è—Ö):")

@dp.message_handler(state=AddStudentState.payment)
async def process_payment(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    payment = message.text
    try:
        start = datetime.strptime(user_data["start_date"], "%d.%m.%Y")
        end = datetime.strptime(user_data["end_date"], "%d.%m.%Y")
        days_left = (end - datetime.today()).days
        int(payment)  # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Å—É–º–º–∞ ‚Äî —á–∏—Å–ª–æ
    except ValueError:
        await message.reply("–û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –¥–∞—Ç—ã –∏ —Å—É–º–º–∞ –æ–ø–ª–∞—Ç—ã –≤–≤–µ–¥–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
        return

    new_row = [
        user_data["fio"],
        user_data["phone"],
        user_data["telegram_id"],
        days_left,
        user_data["abon_type"],
        user_data["start_date"],
        user_data["end_date"],
        payment
    ]

    try:
        await append_row_async(new_row)
        await message.reply("‚úÖ –£—á–µ–Ω–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω!", reply_markup=main_menu_kb)
    except Exception as e:
        await message.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ —Ç–∞–±–ª–∏—Ü—É: {e}")

    await state.finish()

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
